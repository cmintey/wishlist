datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-1.1.x", "linux-arm64-openssl-1.1.x"]
}

model User {
    id                  String                @id @unique @default(cuid())
    sessions            Session[]
    username            String                @unique
    name                String
    email               String                @unique @default("changeme@email.com")
    picture             String?
    items               Item[]                @relation("MyItems")
    createdItems        Item[]                @relation("CreatedItems")
    addedItems          ListItem[]
    claimedItems        ItemClaim[]
    role                Role                  @relation(fields: [roleId], references: [id])
    roleId              Int                   @default(1)
    UserGroupMembership UserGroupMembership[]
    hashedPassword      String
    lists               List[]

    @@map("user")
}

model SystemUser {
    id           String      @id @unique @default(cuid())
    username     String
    name         String?     @default("Anonymous")
    claimedItems ItemClaim[]

    @@map("system_user")
}

model Session {
    id        String   @id @unique
    userId    String
    expiresAt DateTime
    user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

    @@index([userId])
    @@map("session")
}

model Role {
    id                  Int                   @id @unique
    name                String
    User                User[]
    UserGroupMembership UserGroupMembership[]

    @@map("role")
}

model Group {
    id                  String                @id @unique @default(uuid())
    name                String                @unique
    UserGroupMembership UserGroupMembership[]
    lists               List[]

    @@map("group")
}

model UserGroupMembership {
    id      String  @id @unique @default(uuid())
    active  Boolean @default(false)
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    group   Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
    role    Role    @relation(fields: [roleId], references: [id])
    userId  String
    groupId String
    roleId  Int     @default(1)

    @@index([userId])
    @@index([groupId])
    @@index([userId, groupId])
    @@map("user_group_membership")
}

model List {
    id        String      @id @unique @default(cuid())
    name      String?
    owner     User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId   String
    group     Group       @relation(fields: [groupId], references: [id], onDelete: Cascade)
    groupId   String
    public    Boolean     @default(false)
    icon      String?
    iconColor String?
    items     ListItem[]
    claims    ItemClaim[]

    @@index([ownerId])
    @@index([groupId])
    @@index([ownerId, groupId])
    @@map("list")
}

model Item {
    id          Int         @id @unique @default(autoincrement())
    name        String
    price       String?
    itemPriceId String?
    itemPrice   ItemPrice?  @relation(fields: [itemPriceId], references: [id], onDelete: SetNull)
    url         String?
    note        String?
    imageUrl    String?
    user        User        @relation(name: "MyItems", fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    createdBy   User        @relation(name: "CreatedItems", fields: [createdById], references: [id], onDelete: Cascade)
    createdById String
    lists       ListItem[]
    claims      ItemClaim[]

    @@index([userId])
    @@map("items")
}

model ItemPrice {
    id       String @id @unique @default(uuid())
    value    Int
    currency String
    Item     Item[]

    @@map("item_price")
}

model ListItem {
    id           String  @id @unique @default(uuid())
    list         List    @relation(fields: [listId], references: [id], onDelete: Cascade)
    listId       String
    item         Item    @relation(fields: [itemId], references: [id], onDelete: Cascade)
    itemId       Int
    addedBy      User    @relation(fields: [addedById], references: [id])
    addedById    String
    approved     Boolean @default(true)
    displayOrder Int?

    @@unique([listId, itemId])
    @@index([listId])
    @@index([itemId])
    @@map("list_item")
}

model ItemClaim {
    id                String      @id @unique @default(uuid())
    item              Item        @relation(fields: [itemId], references: [id], onDelete: Cascade)
    itemId            Int
    list              List        @relation(fields: [listId], references: [id], onDelete: Cascade)
    listId            String
    claimedBy         User?       @relation(fields: [claimedById], references: [id], onDelete: Cascade)
    claimedById       String?
    publicClaimedBy   SystemUser? @relation(fields: [publicClaimedById], references: [id], onDelete: Cascade)
    publicClaimedById String?
    purchased         Boolean     @default(false)

    @@index([itemId])
    @@index([claimedById])
    @@map("list_item_claim")
}

model PasswordReset {
    id          String   @id @unique @default(uuid())
    createdAt   DateTime @default(now())
    userId      String
    hashedToken String
    redeemed    Boolean  @default(false)

    @@index([hashedToken])
    @@map("password_resets")
}

model SignupToken {
    id          String   @id @unique @default(uuid())
    createdAt   DateTime @default(now())
    hashedToken String
    redeemed    Boolean  @default(false)
    groupId     String   @default("global")

    @@index([hashedToken])
    @@map("signup_tokens")
}

model SystemConfig {
    key     String
    value   String?
    groupId String

    @@id([key, groupId])
    @@map("system_config")
}

model Patch {
    id          String   @id @unique
    executed_at DateTime @default(now())

    @@map("patch")
}
