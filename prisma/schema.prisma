datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-1.1.x", "linux-arm64-openssl-1.1.x"]
}

model User {
    id                  String                @id @unique @default(cuid())
    sessions            Session[]
    username            String                @unique
    name                String
    email               String                @unique @default("changeme@email.com")
    picture             String?
    items               Item[]                @relation("MyItems")
    addedItems          Item[]                @relation("AddedItems")
    plegedItems         Item[]                @relation("PledgedItems")
    role                Role                  @relation(fields: [roleId], references: [id])
    roleId              Int                   @default(1)
    UserGroupMembership UserGroupMembership[]
    hashedPassword      String
    publicLists         PublicList[]

    @@map("user")
}

model SystemUser {
    id       String  @id @unique @default(cuid())
    username String
    name     String? @default("Anonymous")
    Item     Item[]  @relation("PublicPledgedItems")

    @@map("system_user")
}

model Session {
    id        String   @id @unique
    userId    String
    expiresAt DateTime
    user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

    @@index([userId])
    @@map("session")
}

model Role {
    id                  Int                   @id @unique
    name                String
    User                User[]
    UserGroupMembership UserGroupMembership[]

    @@map("role")
}

model Group {
    id                  String                @id @unique @default(uuid())
    name                String                @unique
    UserGroupMembership UserGroupMembership[]
    Item                Item[]
    publicLists         PublicList[]

    @@map("group")
}

model UserGroupMembership {
    id      String  @id @unique @default(uuid())
    active  Boolean @default(false)
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    group   Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
    role    Role    @relation(fields: [roleId], references: [id])
    userId  String
    groupId String
    roleId  Int     @default(1)

    @@index([userId])
    @@index([groupId])
    @@index([userId, groupId])
    @@map("user_group_membership")
}

model Item {
    id                Int         @id @unique @default(autoincrement())
    name              String
    price             String?
    url               String?
    note              String?
    imageUrl          String?
    user              User        @relation(name: "MyItems", fields: [userId], references: [id], onDelete: Cascade)
    userId            String
    addedBy           User        @relation(name: "AddedItems", fields: [addedById], references: [id], onDelete: Cascade)
    addedById         String
    pledgedBy         User?       @relation(name: "PledgedItems", fields: [pledgedById], references: [id], onDelete: SetNull)
    pledgedById       String?
    publicPledgedBy   SystemUser? @relation(name: "PublicPledgedItems", fields: [publicPledgedById], references: [id], onDelete: SetNull)
    publicPledgedById String?
    approved          Boolean     @default(true)
    purchased         Boolean     @default(false)
    group             Group?      @relation(fields: [groupId], references: [id], onDelete: Cascade)
    groupId           String?

    @@index([userId])
    @@index([pledgedById])
    @@map("items")
}

model PasswordReset {
    id          String   @id @unique @default(uuid())
    createdAt   DateTime @default(now())
    userId      String
    hashedToken String
    redeemed    Boolean  @default(false)

    @@index([hashedToken])
    @@map("password_resets")
}

model SignupToken {
    id          String   @id @unique @default(uuid())
    createdAt   DateTime @default(now())
    hashedToken String
    redeemed    Boolean  @default(false)
    groupId     String   @default("global")

    @@index([hashedToken])
    @@map("signup_tokens")
}

model SystemConfig {
    key     String
    value   String?
    groupId String

    @@id([key, groupId])
    @@map("system_config")
}

model PublicList {
    id      String @id @unique @default(cuid())
    userId  String
    groupId String
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

    @@index([userId, groupId])
    @@map("public_list")
}
