datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["filteredRelationCount"]
    binaryTargets   = ["native", "debian-openssl-1.1.x"]
}

model User {
    id              String    @id @unique @default(cuid())
    provider_id     String    @unique
    hashed_password String?
    session         Session[]
    username        String    @unique
    name            String
    email           String    @unique @default("changeme@email.com")
    myItems         Item[]    @relation("MyItems")
    addedItems      Item[]    @relation("AddedItems")
    plegedItems     Item[]    @relation("PledgedItems")
    role            Role      @relation(fields: [roleId], references: [id])
    roleId          Int       @default(1)

    @@map("user")
}

model Session {
    id           String @id @unique
    user_id      String
    expires      BigInt
    idle_expires BigInt
    user         User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
    @@map("session")
}

model Role {
    id   Int    @id @unique
    name String
    User User[]
}

model Item {
    id          Int     @id @unique @default(autoincrement())
    name        String
    price       String?
    url         String?
    note        String?
    image_url   String?
    user        User    @relation(name: "MyItems", fields: [userId], references: [id])
    userId      String
    addedBy     User    @relation(name: "AddedItems", fields: [addedById], references: [id])
    addedById   String
    pledgedBy   User?   @relation(name: "PledgedItems", fields: [pledgedById], references: [id])
    pledgedById String?

    @@index([userId])
    @@map("items")
}

model PasswordReset {
    id          Int      @id @unique @default(autoincrement())
    createdAt   DateTime @default(now())
    expiresIn   Int
    userId      String
    hashedToken String
    redeemed    Boolean  @default(false)

    @@index([hashedToken])
    @@map("password_resets")
}

model SignupToken {
    id          Int      @id @unique @default(autoincrement())
    createdAt   DateTime @default(now())
    expiresIn   Int
    hashedToken String
    redeemed    Boolean  @default(false)

    @@index([hashedToken])
    @@map("signup_tokens")
}
