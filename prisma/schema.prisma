datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["filteredRelationCount"]
    binaryTargets   = ["native", "debian-openssl-1.1.x", "linux-arm64-openssl-1.1.x"]
}

model AuthUser {
    id                  String                @id @unique @default(cuid())
    auth_session        AuthSession[]
    username            String                @unique
    name                String
    email               String                @unique @default("changeme@email.com")
    picture             String?
    items               Item[]                @relation("MyItems")
    addedItems          Item[]                @relation("AddedItems")
    plegedItems         Item[]                @relation("PledgedItems")
    role                Role                  @relation(fields: [roleId], references: [id])
    roleId              Int                   @default(1)
    auth_key            AuthKey[]
    UserGroupMembership UserGroupMembership[]

    @@map("user")
}

model AuthSession {
    id             String   @id @unique
    user_id        String
    active_expires BigInt
    idle_expires   BigInt
    auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
    @@map("session")
}

model AuthKey {
    id              String   @id @unique
    hashed_password String?
    user_id         String
    primary_key     Boolean
    expires         BigInt?
    auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
    @@map("key")
}

model Role {
    id                  Int                   @id @unique
    name                String
    User                AuthUser[]
    UserGroupMembership UserGroupMembership[]
}

model Group {
    id                  String                @id @unique @default(uuid())
    name                String                @unique
    UserGroupMembership UserGroupMembership[]
    Item                Item[]

    @@map("group")
}

model UserGroupMembership {
    id      String   @id @unique @default(uuid())
    active  Boolean  @default(false)
    user    AuthUser @relation(fields: [userId], references: [id])
    group   Group    @relation(fields: [groupId], references: [id])
    role    Role     @relation(fields: [roleId], references: [id])
    userId  String
    groupId String
    roleId  Int      @default(1)

    @@map("user_group_membership")
}

model Item {
    id          Int       @id @unique @default(autoincrement())
    name        String
    price       String?
    url         String?
    note        String?
    image_url   String?
    user        AuthUser  @relation(name: "MyItems", fields: [userId], references: [id])
    userId      String
    addedBy     AuthUser  @relation(name: "AddedItems", fields: [addedById], references: [id])
    addedById   String
    pledgedBy   AuthUser? @relation(name: "PledgedItems", fields: [pledgedById], references: [id])
    pledgedById String?
    approved    Boolean   @default(true)
    purchased   Boolean   @default(false)
    group       Group?    @relation(fields: [groupId], references: [id])
    groupId     String?

    @@index([userId])
    @@map("items")
}

model PasswordReset {
    id          Int      @id @unique @default(autoincrement())
    createdAt   DateTime @default(now())
    expiresIn   Int
    userId      String
    hashedToken String
    redeemed    Boolean  @default(false)

    @@index([hashedToken])
    @@map("password_resets")
}

model SignupToken {
    id          Int      @id @unique @default(autoincrement())
    createdAt   DateTime @default(now())
    expiresIn   Int
    hashedToken String
    redeemed    Boolean  @default(false)
    groupId     String   @default("global")

    @@index([hashedToken])
    @@map("signup_tokens")
}

model SystemConfig {
    key     String
    value   String?
    groupId String

    @@id([key, groupId])
    @@map("system_config")
}
